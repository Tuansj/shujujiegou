结构化的模仿方式和流水线的自动生产方式。


问题发现关键点，也就是想出最为核心的算法。

分解成三种问题：
比较，遍历（访问东西），赋值放东西――》查找，排序

训练分开：一个是三种问题的快速实现。一个是问题的关键点的寻找。

基本方式：
双重遍历()


1.一堆东西找重复的。包括重复的数，重复的次数。


2.路径交叉问题：
https://leetcode-cn.com/problems/path-crossing/comments/
IsPathCrossing.h文件
可以用集合去判断，每次添加的时候判断是否已经拥有。相当于过程中进行遍历。api随便用所以知道通用的api可以节约造轮子的时间。

3.质数的访问问题

4.做删除会导致超时，不能每次去判断vector的长度。